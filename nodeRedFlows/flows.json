[
    {
        "id": "c67588a7e974742a",
        "type": "tab",
        "label": "Water Quality Dashboard",
        "disabled": false,
        "info": "Water Quality Monitoring System Dashboard",
        "env": []
    },
    {
        "id": "eb6b4378b67e1a95",
        "type": "mqtt in",
        "z": "c67588a7e974742a",
        "name": "WaterData",
        "topic": "reservoir/water_quality/data",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "ea598e900f46bb49",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 320,
        "wires": [
            [
                "d4a4a271d5049cf1",
                "589d66e97f3a7e5f",
                "d419e274a40ea53c",
                "96b36936243add71",
                "d7ba2411042c7f62"
            ]
        ]
    },
    {
        "id": "d4a4a271d5049cf1",
        "type": "debug",
        "z": "c67588a7e974742a",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 320,
        "wires": []
    },
    {
        "id": "d419e274a40ea53c",
        "type": "function",
        "z": "c67588a7e974742a",
        "name": "Format Dashboard Data",
        "func": "// Add timestamp for charts\nif (!msg.payload.timestamp_iso) {\n    // Handle the new timestamp format or use current date if timestamp is invalid\n    try {\n        // Parse the timestamp if it's in the format \"10:20:13 15 04 2025\"\n        let timestampStr = msg.payload.timestamp;\n        \n        // Check if timestamp is a string with the time and date format\n        if (typeof timestampStr === 'string' && timestampStr.includes(':')) {\n            // Extract the components from \"10:20:13 15 04 2025\"\n            let parts = timestampStr.split(' ');\n            if (parts.length >= 3) {\n                let time = parts[0]; // \"10:20:13\"\n                let day = parts[1];  // \"15\"\n                let month = parts[2]; // \"04\"\n                let year = parts[3];  // \"2025\"\n                \n                // Create an ISO date string\n                msg.payload.timestamp_iso = `${year}-${month}-${day}T${time}`;\n            } else {\n                // Fallback to current time if format doesn't match\n                msg.payload.timestamp_iso = new Date().toISOString();\n            }\n        } else {\n            // Fallback to current time\n            msg.payload.timestamp_iso = new Date().toISOString();\n        }\n    } catch (e) {\n        // If any parsing error occurs, use current time\n        msg.payload.timestamp_iso = new Date().toISOString();\n    }\n}\n\n// Parse numeric values to ensure they're numbers not strings\nmsg.payload.ph = parseFloat(msg.payload.ph) || 0;\nmsg.payload.tds = parseFloat(msg.payload.tds) || 0;\nmsg.payload.turbidity = parseFloat(msg.payload.turbidity) || 0;\nmsg.payload.temperature = parseFloat(msg.payload.temperature) || 0;\n\n// Create separate messages for each gauge\nvar ph = { payload: msg.payload.ph, topic: \"pH\" };\nvar tds = { payload: msg.payload.tds, topic: \"TDS\" };\nvar turbidity = { payload: msg.payload.turbidity, topic: \"Turbidity\" };\nvar temperature = { payload: msg.payload.temperature, topic: \"Temperature\" };\n\n// Create messages for status indicators\nvar phStatus = { payload: getPhStatus(msg.payload.ph) };\nvar tdsStatus = { payload: getTdsStatus(msg.payload.tds) };\nvar turbidityStatus = { payload: getTurbidityStatus(msg.payload.turbidity) };\nvar tempStatus = { payload: getTemperatureStatus(msg.payload.temperature) };\n\n// Helper functions for status determination\nfunction getPhStatus(value) {\n    if (value >= 6.5 && value <= 8.5) return \"Normal\";\n    else if (value < 6.5) return \"Acidic\";\n    else return \"Alkaline\";\n}\n\nfunction getTdsStatus(value) {\n    if (value < 300) return \"Excellent\";\n    else if (value >= 300 && value <= 600) return \"Good\";\n    else if (value > 600 && value <= 900) return \"Fair\";\n    else return \"Poor\";\n}\n\nfunction getTurbidityStatus(value) {\n    if (value < 5) return \"Clear\";\n    else if (value >= 5 && value <= 10) return \"Slightly Cloudy\";\n    else return \"Cloudy\";\n}\n\nfunction getTemperatureStatus(value) {\n    if (value >= 20 && value <= 30) return \"Optimal\";\n    else if (value < 20) return \"Cold\";\n    else return \"Hot\";\n}\n\n// Return all messages\nreturn [msg.payload, ph, tds, turbidity, temperature, phStatus, tdsStatus, turbidityStatus, tempStatus];",
        "outputs": 9,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 180,
        "wires": [
            [
                "99b2bd1d7ee9a484"
            ],
            [
                "1ac088fd1e98418c"
            ],
            [
                "5e93f07d163c0d50"
            ],
            [
                "52bdabec72829628"
            ],
            [
                "1e201de9e0bdf244"
            ],
            [
                "326afcb493c5a620"
            ],
            [
                "6a7a46e352ad906e"
            ],
            [
                "2574d975c6b6beea"
            ],
            [
                "57f67ebe5c289452"
            ]
        ]
    },
    {
        "id": "96b36936243add71",
        "type": "function",
        "z": "c67588a7e974742a",
        "name": "Calculate Water Quality Index",
        "func": "// Simple Water Quality Index calculation\nvar ph = msg.payload.ph;\nvar tds = msg.payload.tds;\nvar turbidity = msg.payload.turbidity;\nvar temperature = msg.payload.temperature;\n\n// Normalize values to 0-100 scale\nvar phScore = calculatePhScore(ph);\nvar tdsScore = calculateTdsScore(tds);\nvar turbidityScore = calculateTurbidityScore(turbidity);\nvar tempScore = calculateTempScore(temperature);\n\n// Calculate overall WQI (simple average)\nvar wqi = (phScore + tdsScore + turbidityScore + tempScore) / 4;\n\n// Quality classification\nvar quality = \"\";\nif (wqi >= 90) quality = \"Excellent\";\nelse if (wqi >= 70) quality = \"Good\";\nelse if (wqi >= 50) quality = \"Fair\";\nelse if (wqi >= 25) quality = \"Poor\";\nelse quality = \"Very Poor\";\n\n// Helper functions for parameter scoring\nfunction calculatePhScore(value) {\n    if (value >= 6.5 && value <= 7.5) return 100;\n    else if (value >= 6.0 && value < 6.5) return 80;\n    else if (value > 7.5 && value <= 8.5) return 80;\n    else if (value >= 5.0 && value < 6.0) return 60;\n    else if (value > 8.5 && value <= 9.0) return 60;\n    else return 30;\n}\n\nfunction calculateTdsScore(value) {\n    if (value < 300) return 100;\n    else if (value >= 300 && value <= 600) return 80;\n    else if (value > 600 && value <= 900) return 60;\n    else if (value > 900 && value <= 1200) return 40;\n    else return 20;\n}\n\nfunction calculateTurbidityScore(value) {\n    if (value < 1) return 100;\n    else if (value >= 1 && value < 5) return 80;\n    else if (value >= 5 && value <= 10) return 60;\n    else if (value > 10 && value <= 15) return 40;\n    else return 20;\n}\n\nfunction calculateTempScore(value) {\n    if (value >= 20 && value <= 30) return 100;\n    else if ((value >= 15 && value < 20) || (value > 30 && value <= 35)) return 80;\n    else if ((value >= 10 && value < 15) || (value > 35 && value <= 40)) return 60;\n    else return 40;\n}\n\n// Create messages for WQI gauge and status\nvar wqiGauge = { payload: Math.round(wqi), topic: \"WQI\" };\nvar wqiStatus = { payload: quality };\n\nreturn [wqiGauge, wqiStatus];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 620,
        "wires": [
            [
                "23ca74c226efb970"
            ],
            [
                "6a363c97b8166962"
            ]
        ]
    },
    {
        "id": "326afcb493c5a620",
        "type": "ui_text",
        "z": "c67588a7e974742a",
        "group": "fa13a851934c06de",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "pH Status",
        "label": "pH Status:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 720,
        "y": 380,
        "wires": []
    },
    {
        "id": "6a7a46e352ad906e",
        "type": "ui_text",
        "z": "c67588a7e974742a",
        "group": "fa13a851934c06de",
        "order": 2,
        "width": "6",
        "height": "1",
        "name": "TDS Status",
        "label": "TDS Status:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 730,
        "y": 420,
        "wires": []
    },
    {
        "id": "2574d975c6b6beea",
        "type": "ui_text",
        "z": "c67588a7e974742a",
        "group": "fa13a851934c06de",
        "order": 3,
        "width": "6",
        "height": "1",
        "name": "Turbidity Status",
        "label": "Turbidity Status:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 740,
        "y": 460,
        "wires": []
    },
    {
        "id": "57f67ebe5c289452",
        "type": "ui_text",
        "z": "c67588a7e974742a",
        "group": "fa13a851934c06de",
        "order": 4,
        "width": "6",
        "height": "1",
        "name": "Temperature Status",
        "label": "Temperature Status:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 750,
        "y": 500,
        "wires": []
    },
    {
        "id": "6a363c97b8166962",
        "type": "ui_text",
        "z": "c67588a7e974742a",
        "group": "86815b0d92fb9776",
        "order": 2,
        "width": "12",
        "height": "2",
        "name": "WQI Status",
        "label": "Water Quality:",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 730,
        "y": 640,
        "wires": []
    },
    {
        "id": "1ac088fd1e98418c",
        "type": "ui_gauge",
        "z": "c67588a7e974742a",
        "name": "pH Gauge",
        "group": "8b3cf9e1355c6229",
        "order": 1,
        "width": "6",
        "height": "4",
        "gtype": "gage",
        "title": "pH Level",
        "label": "pH",
        "format": "{{value}}",
        "min": 0,
        "max": "14",
        "colors": [
            "#ca3838",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "6.5",
        "seg2": "8.5",
        "className": "",
        "x": 730,
        "y": 180,
        "wires": []
    },
    {
        "id": "5e93f07d163c0d50",
        "type": "ui_gauge",
        "z": "c67588a7e974742a",
        "name": "TDS Gauge",
        "group": "8b3cf9e1355c6229",
        "order": 2,
        "width": "6",
        "height": "4",
        "gtype": "gage",
        "title": "TDS",
        "label": "ppm",
        "format": "{{value}}",
        "min": 0,
        "max": "1500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "300",
        "seg2": "900",
        "className": "",
        "x": 730,
        "y": 220,
        "wires": []
    },
    {
        "id": "52bdabec72829628",
        "type": "ui_gauge",
        "z": "c67588a7e974742a",
        "name": "Turbidity Gauge",
        "group": "8b3cf9e1355c6229",
        "order": 3,
        "width": "6",
        "height": "4",
        "gtype": "gage",
        "title": "Turbidity",
        "label": "NTU",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "5",
        "seg2": "10",
        "className": "",
        "x": 740,
        "y": 260,
        "wires": []
    },
    {
        "id": "1e201de9e0bdf244",
        "type": "ui_gauge",
        "z": "c67588a7e974742a",
        "name": "Temperature Gauge",
        "group": "8b3cf9e1355c6229",
        "order": 4,
        "width": "6",
        "height": "4",
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "40",
        "colors": [
            "#0080ff",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "20",
        "seg2": "30",
        "className": "",
        "x": 760,
        "y": 300,
        "wires": []
    },
    {
        "id": "23ca74c226efb970",
        "type": "ui_gauge",
        "z": "c67588a7e974742a",
        "name": "WQI Gauge",
        "group": "86815b0d92fb9776",
        "order": 1,
        "width": "12",
        "height": "6",
        "gtype": "donut",
        "title": "Water Quality Index",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#ca3838",
            "#e6e600",
            "#00b500"
        ],
        "seg1": "50",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 730,
        "y": 580,
        "wires": []
    },
    {
        "id": "99b2bd1d7ee9a484",
        "type": "ui_chart",
        "z": "c67588a7e974742a",
        "name": "Water Quality History",
        "group": "ae3382f91f195f93",
        "order": 1,
        "width": "24",
        "height": "6",
        "label": "Water Quality Parameters History",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Waiting for data...",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#d62728",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 760,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "3fb7f6bedd3aa57e",
        "type": "ui_template",
        "z": "c67588a7e974742a",
        "group": "cc546d0ef79bf5ac",
        "name": "Device Info",
        "order": 1,
        "width": "24",
        "height": "2",
        "format": "<div style=\"text-align: center; width: 100%;\">\n    <h3>Smart Water Quality Monitoring System</h3>\n    <p>Last device ID: {{msg.payload.deviceId}} | Last updated: {{msg.payload.timestamp_iso}}</p>\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1010,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "d7ba2411042c7f62",
        "type": "mongodb3 in",
        "z": "c67588a7e974742a",
        "service": "_ext_",
        "configNode": "5025d7188d38d556",
        "name": "mongoDB",
        "collection": "swqms",
        "operation": "insert",
        "x": 340,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "ea598e900f46bb49",
        "type": "mqtt-broker",
        "name": "HiveMq",
        "broker": "5df16d8a5a1c438294a51cb556f6df87.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "0dd062dc9fc95904",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "fa13a851934c06de",
        "type": "ui_group",
        "name": "a1b2c3d4e5f67890",
        "tab": "5f1eaf98fb9b6835",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "86815b0d92fb9776",
        "type": "ui_group",
        "name": "c9d8e7f6a5b4c321",
        "tab": "5f1eaf98fb9b6835",
        "order": 5,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8b3cf9e1355c6229",
        "type": "ui_group",
        "name": "f1e2d3c4b5a67890",
        "tab": "5f1eaf98fb9b6835",
        "order": 3,
        "disp": true,
        "width": 6
    },
    {
        "id": "ae3382f91f195f93",
        "type": "ui_group",
        "name": "e98f7d6c5b4a32e1",
        "tab": "5f1eaf98fb9b6835",
        "order": 4,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "cc546d0ef79bf5ac",
        "type": "ui_group",
        "name": "b0a9c8d7e6f5b432",
        "tab": "5f1eaf98fb9b6835",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5025d7188d38d556",
        "type": "mongodb3",
        "uri": "mongodb+srv://swqms:Swqms123@nodered.5rouyap.mongodb.net/swqms?retryWrites=true&w=majority&appName=nodeRed",
        "name": "nodered",
        "options": "",
        "parallelism": -1
    },
    {
        "id": "0dd062dc9fc95904",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "5f1eaf98fb9b6835",
        "type": "ui_tab",
        "name": "Water Quality Dashboard",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]